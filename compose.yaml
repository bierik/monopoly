services:
  ingress:
    container_name: ingress
    build:
      context: ingress
      dockerfile: Dockerfile
    ports:
      - 5000:80
    environment:
      - GAMEMASTER_UPSTREAM=gamemaster:8000
    profiles: [dev]

  test-ingress:
    container_name: test-ingress
    build:
      context: ingress
      dockerfile: Dockerfile
    ports:
      - 10000:80
    environment:
      - GAMEMASTER_UPSTREAM=host.docker.internal:50000
    profiles: [test]

  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:2.0.18
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
      - 1883:1883
    profiles: [dev, test]

  board:
    container_name: board
    build:
      context: board
      dockerfile: Dockerfile
    volumes:
      - ./board:/app/board
      - ./common:/app/common
      - /app/board/node_modules

    profiles: [dev, test]

  gamemaster:
    container_name: gamemaster
    build:
      context: gamemaster
      dockerfile: Dockerfile
    volumes:
      - ./gamemaster:/app
    environment:
      DJANGO_DATABASE_PASSWORD: postgres
      DJANGO_DATABASE_HOST: db
      DJANGO_DATABASE_USER: postgres
      PARTICIPATIONS: 2
    stdin_open: true
    tty: true
    profiles: [dev]

  player:
    container_name: player
    build:
      context: player
      dockerfile: Dockerfile
    volumes:
      - ./player:/app/player
      - ./common:/app/common
      - /app/player/node_modules
    profiles: [dev, test]

  db:
    container_name: db
    image: postgres:16.1-alpine3.18
    volumes:
      - ./var/data/db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    profiles: [dev]

  test-db:
    container_name: test-db
    image: postgres:16.1-alpine3.18
    ports:
      - 20000:5432
    command: postgres --fsync=off --synchronous-commit=off --full-page-writes=off
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    profiles: [test]
    tmpfs:
      - /var/lib/postgresql

  minio:
    image: minio/minio
    ports:
      - "30000:9000"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
      MINIO_BROWSER_REDIRECT_URL: http://localhost:10000/minio/
    profiles: [dev]
    command: server --console-address :9001 /data
    volumes:
      - ./var/data/minio:/data
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 5s
      retries: 3
      start_period: 5s
      timeout: 5s

  create-s3-buckets:
    image: minio/mc
    depends_on:
      minio:
          condition: service_healthy
    profiles: [dev, test]
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000/ admin password;
      /usr/bin/mc mb minio/test;
      /usr/bin/mc mb minio/development;
      /usr/bin/mc anonymous set public minio/test;
      /usr/bin/mc anonymous set public minio/development;
      exit 0;
      "
